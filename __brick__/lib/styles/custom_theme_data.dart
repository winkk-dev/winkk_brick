// Generated by mason - winkk_brick
import 'package:flutter/material.dart';
import '../values/custom_sizes.dart';
import 'custom_colors.dart';
import 'custom_text_styles.dart';
import 'custom_styles.dart';

class CustomThemeData {
  CustomThemeData._();

  static ThemeData _createTheme(ColorScheme colorScheme, TextTheme textTheme, CustomColors customColors, CustomTextStyles customTextStyles, Brightness brightness) => ThemeData(
    colorScheme: colorScheme,
    textTheme: textTheme,
    // fontFamily: 'Roboto', // TODO define font after including
    // fontFamilyFallback: const <String>['Roboto'],
    appBarTheme: const AppBarTheme(
      titleSpacing: CustomSizes.medium,
      centerTitle: false,
    ),
    filledButtonTheme: FilledButtonThemeData(
      style: ButtonStyle(
        shape: WidgetStateProperty.all(const RoundedRectangleBorder(borderRadius: CustomStyles.borderRadius)),
      ),
    ),
    textButtonTheme: TextButtonThemeData(
      style: ButtonStyle(
        shape: WidgetStateProperty.all(const RoundedRectangleBorder(borderRadius: CustomStyles.borderRadius)),
        textStyle: WidgetStateProperty.all(textTheme.labelMedium), // Smaller than normal buttons
      ),
    ),
    progressIndicatorTheme: const ProgressIndicatorThemeData(
      linearMinHeight: 8.0,
    ),
    inputDecorationTheme: InputDecorationTheme(
      border: const OutlineInputBorder(
        borderRadius: CustomStyles.borderRadius,
        borderSide: BorderSide()
      ),
      enabledBorder: const OutlineInputBorder(
        borderRadius: CustomStyles.borderRadius,
        borderSide: BorderSide.none,
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: CustomStyles.borderRadius,
        borderSide: BorderSide(color: colorScheme.error),
      ),
      contentPadding: const EdgeInsets.all(12.0),
      fillColor: colorScheme.secondary,
      filled: true,
      labelStyle: textTheme.bodySmall,
      hintStyle: textTheme.bodySmall,
      errorStyle: textTheme.bodySmall!.copyWith(color: colorScheme.error), 
    ),
    dividerTheme: DividerThemeData(
      color: colorScheme.onSurface,
      thickness: 1.0,
    ),
    navigationBarTheme: NavigationBarThemeData(
      indicatorColor: Colors.transparent,
      labelTextStyle: WidgetStateTextStyle.resolveWith(
        (state) => textTheme.labelSmall!.copyWith(
          color: state.contains(WidgetState.selected) ? colorScheme.primary : colorScheme.onSurface,
        )
      ),
      iconTheme: WidgetStateProperty.resolveWith(
        (state) => IconThemeData( // Highlight on selected with primary
          color: state.contains(WidgetState.selected) ? colorScheme.primary : colorScheme.onSurface,
        )
      )
    ),
    // Rail theme should match the [NavigationBarThemeData]
    navigationRailTheme: NavigationRailThemeData(
      groupAlignment: 0.0, // Means center, nice one NavigationRail devs
      backgroundColor: colorScheme.surfaceContainer,
      indicatorColor: Colors.transparent,
      selectedIconTheme: IconThemeData(
        color: colorScheme.primary,
      ),
      unselectedIconTheme: IconThemeData(
        color: colorScheme.onSurface,
      ),
      selectedLabelTextStyle: textTheme.labelSmall!.copyWith(
        color: colorScheme.primary,
      ),
      unselectedLabelTextStyle: textTheme.labelSmall!.copyWith(
        color: colorScheme.onSurface,
      ),
    ),
    snackBarTheme: const SnackBarThemeData(
      shape: RoundedRectangleBorder(borderRadius: CustomStyles.borderRadius),
      behavior: SnackBarBehavior.floating,
    ),
  );

  static final ThemeData light = _createTheme(CustomColors.lightColorScheme, CustomTextStyles.globalTypography.black, CustomColors.light, CustomTextStyles.lightTextStyles, Brightness.light);
  {{^darkMode}}/*{{/darkMode}}
  static final ThemeData dark = _createTheme(CustomColors.darkColorScheme, CustomTextStyles.globalTypography.white, CustomColors.dark, CustomTextStyles.darkTextStyles, Brightness.dark);{{^darkMode}}*/{{/darkMode}}
}