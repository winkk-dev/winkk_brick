// Generated by mason - winkk_brick
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_native_splash/flutter_native_splash.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'services/metadata/user_agent_provider.dart';
import 'services/preferences/preferences_provider.dart';
import 'services/sentry/sentry_auth_provider.dart';
import 'utils/logger.dart';

/// Additional startup operations, which are not providers, can be added here.
Future<void> _startupInit() async {
  try {
    // TODO Add startup operations here
  } catch (e, s) {
    logger.e('Startup failed', error: e, stackTrace: s);
  }
}

/// Use the eager init pattern to ensure providers are initialized before the app starts.
/// ALso useful for starting async operations as the app is starting.
/// https://riverpod.dev/docs/essentials/eager_initialization
class StartupWidget extends HookConsumerWidget {
  const StartupWidget({super.key, required this.child});

  final Widget child;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final isProviderInitialized = useState(false);
    final isStartupDone = useState(false);
    final isDone = useState(false);

    // These are required providers for the app show, allow .requireValue for them at any point
    final isLoading = [
      //ref.watch(sentryAuthProvider),
      ref.watch(userAgentProvider),
      ref.watch(preferencesProvider),
    ].any((e) => e.isLoading);

    // TODO Other non-required providers may be initialized here
    // ref.watch(anyProvider);

    // Below here should not be changed unless you want to edit the startup process
    // or show something instead of the splash screen.

    // Run _startupInit() once
    useEffect(() {
      _startupInit().then((_) => isStartupDone.value = true);
      return null;
    }, []);

    // Set isProviderInitialized to true when all required providers are initialized for the first time
    useEffect(() {
      if (!isProviderInitialized.value && !isLoading) {
        isProviderInitialized.value = true;
      }
      return null;
    }, [isLoading]);

    // Remove splash screen and set isDone when both initializations are done 
    useEffect(() {
      if (isProviderInitialized.value && isStartupDone.value) {
        isDone.value = true;
        FlutterNativeSplash.remove(); 
      }
      return null;
    }, [isProviderInitialized.value, isStartupDone.value]);

    // Return an empty widget until required loading is done
    return !isDone.value ? const SizedBox.shrink() : child;
  }
}
