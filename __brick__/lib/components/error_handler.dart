// Generated by mason - winkk_brick
import 'dart:async';
import 'package:flutter/material.dart';
import '../utils/extensions/context_extensions.dart';
import '../utils/logger.dart';
import '../values/custom_durations.dart';
import '../values/custom_sizes.dart';

class ErrorHandler extends StatefulWidget {
  /// Generic ErrorHandler widget for loading/provider errors.
  /// Allows retrying through onRetry.
  /// Shows a spinner while retrying.
  const ErrorHandler({
    super.key,
    this.error,
    this.stackTrace,
    this.padding,
    this.onRetry,
  });

  final Object? error;
  final StackTrace? stackTrace;
  final EdgeInsetsGeometry? padding;
  final Future<void> Function()? onRetry;

  @override
  State<ErrorHandler> createState() => _ErrorHandlerState();
}

class _ErrorHandlerState extends State<ErrorHandler> {
  bool _isRetrying = false;
  int _retryCount = 0;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: widget.padding ?? EdgeInsets.zero,
      child: Align(
        alignment: Alignment.topCenter,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            if(widget.onRetry != null) SizedBox(
              height: CustomSizes.xxlarge,
              width: CustomSizes.xxlarge,
              child: _isRetrying ? const Padding(
                padding: EdgeInsets.all(CustomSizes.tiny), // Extra padding to avoid cutoff
                child: CircularProgressIndicator(),
              ) :
                IconButton.filledTonal(
                  icon: const Icon(Icons.refresh),
                  onPressed: _isRetrying ? null : () async {  // Disable button while retrying
                    if(context.mounted) setState(() => _isRetrying = true);

                    try {
                      await widget.onRetry!();
                    } catch (e) {
                      logger.w('Retry failed', error: e);
                    }

                    if(context.mounted) {
                      setState(() {
                      _isRetrying = false;
                      _retryCount++;
                    });
                    }
                  },
                ),
            ),
            AnimatedSwitcher(
              duration: CustomDurations.medium,
              // Show info after 2 retries or when no retry func is given, the user may not have internet access or the server is down etc.
              child: (_retryCount >= 2 || widget.onRetry == null) ? Column(mainAxisSize: MainAxisSize.min, children: [
                const SizedBox(height: CustomSizes.small),
                Flexible(child: Text(context.localizations.general_error_info, 
                  style: context.textTheme.labelMedium!.copyWith(fontWeight: FontWeight.normal), 
                  textAlign: TextAlign.center
                  )
                ),
              ]) : const SizedBox.shrink()
            ),
          ]),
      ),
    );
    }
}
