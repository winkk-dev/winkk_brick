// Generated by mason - winkk_brick
import 'package:confetti/confetti.dart';
import 'package:flutter/material.dart';
import '../utils/extensions/navigator_extensions.dart';
import '../utils/extensions/context_extensions.dart';
import '../utils/logger.dart';

/// Shows confetti on a transparent background.
class CustomConfetti extends StatefulWidget {
  const CustomConfetti({super.key, this.onDone});

  final VoidCallback? onDone;

  /// Shows a transparent dialog with confetti. Closable by clicking and when done.
  static Future showTransparentDialog(BuildContext context) async => 
    await showDialog(barrierColor: Colors.transparent, context: context, 
      builder: (context) => CustomConfetti(onDone: () => context.rootNavigator.tryPopDialog(context))
    );

  /// Inserts the confetti overlay into the current context. Not closable, removed when done.
  static void insertOverlay(BuildContext context) {
    OverlayEntry? overlayEntry;
    overlayEntry = OverlayEntry(builder: (context) => CustomConfetti(onDone: () => overlayEntry?.remove()));
    Overlay.of(context).insert(overlayEntry);
  }

  @override
  State<CustomConfetti> createState() => _CustomConfettiState();
}

class _CustomConfettiState extends State<CustomConfetti> {
  late ConfettiController _controller;
  bool _isDisposing = false;

  void _confettiListener() {
    if (_controller.state == ConfettiControllerState.stopped) {
      _controller.removeListener(_confettiListener);
      Future(() {
        if(!_isDisposing && context.mounted) {
          logger.d('Confetti finished, removing it.');
          widget.onDone?.call();
        }
      });
    }
  }

  @override
  void initState() {
    super.initState();
    _controller = ConfettiController(duration: const Duration(seconds: 1));
    _controller.addListener(_confettiListener);
    _controller.play();
  }

  @override
  void dispose() {
    _isDisposing = true;
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: Alignment.topCenter,
      child: ConfettiWidget(
        confettiController: _controller,
        blastDirectionality: BlastDirectionality.explosive,
        emissionFrequency: 0.05,
        numberOfParticles: 20,
        colors: [
          Colors.red,
          Colors.blue,
          Colors.green,
        ],
      ),
    );
  }
}
