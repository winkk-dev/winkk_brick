// Generated by mason - winkk_brick
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class CustomButton extends StatefulWidget {
  /// A custom button with an optional animated loading spinner for futures.
  const CustomButton({
    super.key,
    required this.child,
    required this.onPressed,
    this.style,
    this.type = ButtonType.filled,
    this.disabled = false,
    this.showLoadingSpinner = false,
    this.preventFutureFromShowingSpinner = false,
    this.switchDuration = const Duration(milliseconds: 300),
  });

  final Widget child;
  final GestureTapCallback onPressed;
  final ButtonStyle? style;
  final ButtonType type;
  final bool disabled;
  final bool showLoadingSpinner;
  final bool preventFutureFromShowingSpinner;
  final Duration switchDuration;

  @override
  State<CustomButton> createState() => _CustomButtonState();
}

class _CustomButtonState extends State<CustomButton> {
  final Key _loadingSpinnerKey = UniqueKey();

  bool _currentlyShowingLoadingSpinner = false;

  @override
  Widget build(BuildContext context) {
    final GestureTapCallback? onPressedFunc;
    if (widget.disabled || _currentlyShowingLoadingSpinner) {
      onPressedFunc = null;
    } else if (widget.onPressed is Future Function() && !widget.preventFutureFromShowingSpinner) {
      final setStateMethod = setState;
      onPressedFunc = () async {
        if (context.mounted) setStateMethod(() => _currentlyShowingLoadingSpinner = true);
        try {
          await Future.sync(widget.onPressed);
        } finally {
          if (context.mounted) setStateMethod(() => _currentlyShowingLoadingSpinner = widget.showLoadingSpinner);
        }
      };
    } else {
      onPressedFunc = widget.onPressed;
    }

    final childWidget = AnimatedSwitcher(
      duration: widget.switchDuration,
      switchInCurve: Curves.fastOutSlowIn,
      switchOutCurve: Curves.fastOutSlowIn,
      transitionBuilder: (child, animation) {
        return FadeTransition(
          opacity: animation,
          child: SizeTransition(
            sizeFactor: animation,
            axis: Axis.horizontal,
            child: child,
          ),
        );
      },
      child: (widget.showLoadingSpinner || _currentlyShowingLoadingSpinner) ? Builder(
        key: _loadingSpinnerKey,
        builder: (context) {
          switch (Theme.of(context).platform) {
            case TargetPlatform.iOS:
            case TargetPlatform.macOS:
              return SizedBox(
                width: 32,
                child: CupertinoActivityIndicator(
                  color: DefaultTextStyle.of(context).style.color,
                  radius: 9.0,
                ),
              );
            default:
              return Container(
                margin: const EdgeInsets.all(5),
                width: 16,
                height: 16,
                child: Center(
                  child: CircularProgressIndicator(
                    color: DefaultTextStyle.of(context).style.color,
                    strokeWidth: 3.0,
                  ),
                ),
              );
          }
        },
      ) : widget.child,
    );

    switch (widget.type) {
      case ButtonType.elevated:
        return ElevatedButton(onPressed: onPressedFunc, style: widget.style, child: childWidget);
      case ButtonType.filled:
        return FilledButton(onPressed: onPressedFunc, style: widget.style, child: childWidget);
      case ButtonType.outlined:
        return OutlinedButton(onPressed: onPressedFunc, style: widget.style, child: childWidget);
      case ButtonType.text:
        return TextButton(onPressed: onPressedFunc, style: widget.style, child: childWidget);
    }
  }
}

enum ButtonType {
  elevated,
  filled,
  outlined,
  text,
}