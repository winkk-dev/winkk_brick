// Generated by mason - winkk_brick
import 'dart:async';
import 'package:flutter/material.dart';
{{#inAppWebView}}import 'package:flutter_inappwebview/flutter_inappwebview.dart';{{/inAppWebView}}
import 'package:url_launcher/url_launcher.dart';
import 'package:share_plus/share_plus.dart';
import 'package:universal_platform/universal_platform.dart';

class ExternalActions {
  {{#inAppWebView}}static final defaultChromeSafariBrowserSettings = ChromeSafariBrowserSettings(
    toolbarBackgroundColor: Colors.white, // Colors may be adjusted 
    entersReaderIfAvailable: false,
    presentationStyle: ModalPresentationStyle.OVER_FULL_SCREEN,
    transitionStyle: ModalTransitionStyle.COVER_VERTICAL,
    preferredBarTintColor: Colors.white,
    preferredControlTintColor: Colors.white,
    noHistory: true, // needed for the close button to actually close the browser
  );

  static ChromeSafariBrowserSettings authChromeSafariBrowserSettings() {
    final copy = defaultChromeSafariBrowserSettings.copy();
    copy.noHistory = true;
    copy.shareState = CustomTabsShareState.SHARE_STATE_OFF;
    copy.entersReaderIfAvailable = false;
    copy.dismissButtonStyle = DismissButtonStyle.DONE;
    copy.presentationStyle = ModalPresentationStyle.OVER_FULL_SCREEN;
    copy.isSingleInstance = true; // needed - or else the webpage won't be updated on second login
    return copy;
  }

    /// Opens the given [uri] in an in-app browser if available, otherwise falls back to an external browser.
  /// Resolves when 1. in-app browser is closed or 2. external browser is opened (cannot check for closing).
  /// For most devices the in-app browser will be available only on special devices or Androids with disabled Chrome the external browser will be used.
  static Future<void> openInAppBrowser(Uri uri, {ChromeSafariBrowserSettings? customOptions}) async {
    // Fallback for devices without ChromeSafariBrowser
    if (!await ChromeSafariBrowser.isAvailable()) {
      await openInExternalBrowser(uri);
      return;
    }

    final completer = Completer<void>();
    final browser = _CustomChromeSafariBrowser(
      onClose: () => completer.complete(),
    );

    await browser.open(
      url: WebUri.uri(uri),
      settings: customOptions ?? defaultChromeSafariBrowserSettings,
    );
    await completer.future;
  }
  {{/inAppWebView}}
  static String? _encodeQueryParameters(Map<String, String> params) {
    return params.entries.map((MapEntry<String, String> e) =>
      '${Uri.encodeComponent(e.key)}=${Uri.encodeComponent(e.value)}').join('&');
  }

  /// Opens the given [uri] in an external browser.
  static Future<void> openInExternalBrowser(Uri uri) async {
    await launchUrl(uri, mode: LaunchMode.externalApplication);
  }

  /// Tries to launch an email application with the given [emailAddress], [subject] and [body] prefilled.
  static Future<void> sendEmail(String emailAddress, {String? subject, String? body}) async {
    final Uri emailLaunchUri = Uri(
      scheme: 'mailto',
      path: emailAddress,
      query: _encodeQueryParameters({
        if (subject != null) 'subject': subject,
        if (body != null) 'body': body,
      }),
    );

    launchUrl(emailLaunchUri);
  }

  /// Opens the app store page of the app. Only supported on Android and iOS.
  static Future<void> openStorePage() async {
    throw UnimplementedError('openStorePage is not implemented'); // Remove when ids changed
    final url = Uri.parse(
      UniversalPlatform.isAndroid ? "market://details?id=android_id" :
      UniversalPlatform.isIOS ? "itms-apps://apps.apple.com/at/app/iosstore_id/id" 
        : throw UnsupportedError('Unsupported platform'),
    );
    launchUrl(url, mode: LaunchMode.externalApplication);
  }

  /// Creates a Widget that wraps the given [builder] with a [Share.share] call when clicked.
  /// Gets the position of the building widget so the share dialog can be positioned correctly (for iPad especially).
  static Widget shareBuilder({
    required Uri uri,
    required Widget Function(BuildContext context, Function() handleClick) builder,
  }) {
    return Builder(builder: (context) {
      return builder(context, () async {
        final box = context.findRenderObject() as RenderBox?;
        await Share.shareUri(
          uri,
          sharePositionOrigin: box == null ? null : box.localToGlobal(Offset.zero) & box.size,
        );
      });
    });
  }
}
{{#inAppWebView}}
/// Custom InAppBrowser implementation that calls a callback when the browser is closed.
class _CustomChromeSafariBrowser extends ChromeSafariBrowser {
  _CustomChromeSafariBrowser({
    this.onClose,
  }) : super();

  final void Function()? onClose;

  @override
  void onClosed() {
    onClose?.call();
    super.onClosed();
  }
}{{/inAppWebView}}