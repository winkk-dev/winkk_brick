// Generated by mason - winkk_brick
import 'package:dio/dio.dart';
import 'package:logger/logger.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

/// Global logger instance.
final Logger logger = _createLoggerWithSentry();

Logger _createLoggerWithSentry() {
  final logger =  Logger(
    printer: PrettyPrinter(
      errorMethodCount: 4,
      colors: false, // Does not work well with intellij console
    ),
  );
  _addSentry();
  logger.i('Logger initialized');
  return logger;
}

void _addSentry() {
  Logger.addLogListener((event) async {
    if (Sentry.isEnabled) {
      if (event.level.value >= Level.error.value) {
        Contexts? contexts;
        if (event.error is DioException) {
          final dioError = event.error as DioException;
          contexts = Contexts(
            response: SentryResponse(
              statusCode: dioError.response?.statusCode,
              bodySize: dioError.response?.data?.toString().length,
              headers: dioError.response?.headers.map.map((key, value) => MapEntry(key, value.join(','))),
              data: dioError.response?.data,
            ),
          );
        }
        await Sentry.captureEvent(
          SentryEvent(
            timestamp: event.time.toUtc(),
            logger: 'package:logger',
            level: _loggerLevelToSentryLevel(event.level),
            message: SentryMessage(event.message.toString()),
            throwable: event.error,
            contexts: contexts,
          ),
          stackTrace: event.stackTrace,
        );
      } else if (event.level.value >= Level.debug.value) {
        await Sentry.addBreadcrumb(
          Breadcrumb(
              category: 'log',
              type: 'debug',
              timestamp: event.time.toUtc(),
              level: _loggerLevelToSentryLevel(event.level),
              message: event.message.toString(),
              data: {
                if (event.error != null) 'LogEvent.error': event.error,
                if (event.stackTrace != null) 'LogEvent.stackTrace': event.stackTrace,
              }
          ),
        );
      }
    }
  });
}

SentryLevel? _loggerLevelToSentryLevel(Level level) {
  return const <Level, SentryLevel?>{
    Level.all: SentryLevel.debug,
    Level.trace: SentryLevel.debug,
    Level.debug: SentryLevel.debug,
    Level.info: SentryLevel.info,
    Level.warning: SentryLevel.warning,
    Level.error: SentryLevel.error,
    Level.fatal: SentryLevel.fatal,
    Level.off: null,
  }[level];
}