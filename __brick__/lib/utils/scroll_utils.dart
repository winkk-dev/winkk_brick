// Generated by mason - winkk_brick
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'logger.dart';
import 'extensions/context_extensions.dart';

/// 'Hook' to attach the global primary scroll controller to nested scroll controllers in [StatefulShellRoute]s.
/// Issue for nested navigation: https://github.com/flutter/flutter/issues/85603
/// This allows for 1. ScrollToTop through iOS Status-bar and 2. Managing the scroll position in parents (for ScrollToTop through BottomNavigationBar)
/// 
/// Uses [routeScrollControllerProvider] to create a scroll controller for each nested route location.
void useAutoAttachPrimaryScrollController(WidgetRef ref) {
  final context = ref.context;
  final globalScrollController = context.globalScrollController;
  final location = context.lastMatchedLocation;
  final routeScrollController = ref.watch(routeScrollControllerProvider(location));

  useEffect(() {
    WidgetsBinding.instance.addPostFrameCallback((_){
      // Attach new client if has scroll position (any scroll view attached)
      for (final element in globalScrollController.positions.toList()) {
        globalScrollController.detach(element);
      }

      if(routeScrollController.hasClients) {
        logger.d('Location changed, new routeScrollController attached for $location.');
        globalScrollController.attach(routeScrollController.positions.first);
      }
    });

    return () {
      // Remove all clients
      for (final element in globalScrollController.positions.toList()) {
        globalScrollController.detach(element);
      }
    };
  }, [location]);
}

/// Returns a scroll controller for a specific route location.
/// Shall be used in nested branches to support ScrollToTop through [BottomNavigationBar] and iOS scroll to top.
final routeScrollControllerProvider = Provider.autoDispose.family<ScrollController, String>((ref, location) {
  logger.d('Creating scroll controller for $location');
  final controller = ScrollController();

  ref.onDispose(() {
    logger.d('Disposing scroll controller for $location');
    controller.dispose();
  });

  return controller;
});