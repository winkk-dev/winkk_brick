// Generated by mason - winkk_brick

extension CustomListExtensions<T> on List<T> {
  /// Returns a sublist of this list from [start] to [end].
  /// The indices can be out of bounds, in which case they are clamped to the bounds of the list.
  List<T> safeSublist(int start, [int? end]) {
    if (start < 0 || start >= length || (end != null && end <= start)) {
      return [];
    }
    int safeEnd = end == null || end > length ? length : end;
    return sublist(start, safeEnd);
  }

  /// Removes and returns the last element or `null` if the list is empty.
  T? safeRemoveLast() {
    return isEmpty ? null : removeLast();
  }

  /// Removes and returns the first i elements or an empty list if the list is empty.
  List<T> safeRemoveFirst(int? i) {
    if (isEmpty) {
      return [];
    } else if (i == null || i >= length) {
      final result = List<T>.from(this);
      clear();
      return result;
    } else {
      final result = take(i).toList();
      removeRange(0, i);
      return result;
    }
  }

  /// Returns the element at the given [index] or `null` if the index is out of bounds.
  T? getOrNull(int index) =>
      index < 0 || index >= length ? null : this[index];

  /// Joins the elements of this list into a single string with [separator] between each element.
  /// For the last element, [lastSeparator] is used instead.
  String formattedJoin({String separator = ', ', String lastSeparator = ' & '}) {
    if (isEmpty) {
      return '';
    } else if (length == 1) {
      return first.toString();
    } else if (length == 2) {
      return '$first$lastSeparator$last';
    } else {
      final lastItem = this[length - 1];
      final joined = take(length - 1).join(separator);
      return '$joined$lastSeparator$lastItem';
    }
  }
}