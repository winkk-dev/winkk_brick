// Generated by mason - winkk_brick
import 'dart:async';

import 'package:hooks_riverpod/hooks_riverpod.dart';

extension CacheForExtension on AutoDisposeRef<Object?> {
  /// Keeps the provider alive for [duration]. After that when the provider is not being listened to,
  /// it will be disposed. Useful when you want to keep state alive for some time after a page is closed.
  /// https://riverpod.dev/de/docs/essentials/auto_dispose#example-keeping-state-alive-for-a-specific-amount-of-time
  void cacheFor(Duration duration) {
    // Immediately prevent the state from getting destroyed.
    final link = keepAlive();
    // After duration has elapsed, we re-enable automatic disposal.
    final timer = Timer(duration, link.close);

    // Optional: when the provider is recomputed (such as with ref.refresh),
    // we cancel the pending timer.
    onDispose(timer.cancel);
  }

  /// Keeps the provider alive invalidates it after [duration].
  /// Useful when you want to force a refresh after a certain time.
  void cacheAndInvalidateAfter(Duration duration) {
    final link = keepAlive();

    final timer = Timer(duration, () {
      link.close();
      invalidateSelf();
    });

    // Optional: when the provider is recomputed (such as with ref.refresh),
    // we cancel the pending timer.
    onDispose(timer.cancel);
  }
}