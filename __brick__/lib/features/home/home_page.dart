// Generated by mason - winkk_brick
import 'package:flutter/material.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';{{#homeWithBottomNav}}
import 'package:responsive_framework/responsive_framework.dart';
import '../../components/conditional_wrapper.dart';
import '../../utils/extensions/context_extensions.dart';
import '../../router/routes.dart';
import '../../utils/logger.dart';
import '../../values/custom_durations.dart';
import '../../utils/scroll_utils.dart';{{/homeWithBottomNav}}
{{^homeWithBottomNav}}import 'home_start.dart';{{/homeWithBottomNav}}

{{#homeWithBottomNav}}class HomePageIndices {
  static const int home = 0;
  static const int newShipment = 1;
  static const int explore = 2;
  static const int friends = 3;
  static const int profile = 4;
}

/// Common class for [NavigationRail] and [NavigationBar] destinations to avoid redundancy
class HomeDestination {
  final Widget icon;
  final String label;

  const HomeDestination({
    required this.icon,
    required this.label,
  });
}
/// Home page handles navigation and scroll-to-top for its nested [StatefulShellBranch] routes.{{/homeWithBottomNav}}
class HomePage extends HookConsumerWidget {
  const HomePage({
    super.key,{{#homeWithBottomNav}}
    required this.child,
    required this.index{{/homeWithBottomNav}}
  });
  {{#homeWithBottomNav}}
  final Widget child;
  final int index;

    List<NavigationDestination> fromHomeDestinations(List<HomeDestination> destinations) {
    return destinations.map((d) => NavigationDestination(
      icon: d.icon,
      label: d.label,
    )).toList(growable: false);
  }

  List<NavigationRailDestination> railFromHomeDestinations(List<HomeDestination> destinations) {
    return destinations.map((d) => NavigationRailDestination(
      icon: d.icon,
      label: Text(d.label),
    )).toList(growable: false);
  }
  {{/homeWithBottomNav}}
  @override
  Widget build(BuildContext context, WidgetRef ref) { {{#homeWithBottomNav}}
    final globalScrollController = context.globalScrollController;
    useAutoAttachPrimaryScrollController(ref);

    final destinations = [
      HomeDestination(icon: Icon(Icons.home), label: context.localizations.home_start),
      HomeDestination(icon: Icon(Icons.local_shipping), label: context.localizations.home_shipment),
      HomeDestination(icon: Icon(Icons.explore), label: context.localizations.home_explore),
      HomeDestination(icon: Icon(Icons.group), label: context.localizations.home_friends),
      HomeDestination(icon: Icon(Icons.person), label: context.localizations.home_profile),
    ];

    /// Handles navigation and scroll-to-top through [NavigationRail] or [NavigationBar]
    void onDestinationSelected(int i) {
      if (index == i) {
        if (globalScrollController.hasClients && globalScrollController.offset > globalScrollController.position.minScrollExtent) {
          // Perform top scrolling if same page and scrolled
          logger.d('Scrolling to top');
          globalScrollController.animateTo(
            globalScrollController.position.minScrollExtent,
            duration: CustomDurations.medium,
            curve: Curves.easeInOut,
          );
        } else if (context.goRouter.canPop()) {
          // Pop one page if same page and not scrolled
          context.goRouter.pop();
        }
        return;
      }

      // Navigate to new or top page
      switch (i) {
        case HomePageIndices.home: const HomeRoute().go(context); break;
        case HomePageIndices.newShipment: const NewShipmentRoute().go(context); break;
        case HomePageIndices.explore: const ExploreRoute().go(context); break;
        case HomePageIndices.friends: const FriendsRoute().go(context); break;
        case HomePageIndices.profile: const ProfileRoute().go(context); break;
      }
    }

    // PrimaryScrollController for ScrollToTop recognition in [StatefulShellRoute]
    return PrimaryScrollController(
      controller: globalScrollController,
      child: Scaffold(
        // Show NavigationRail on larger screens, may remove or replace with drawer instead.
        body: ConditionalWrapper(
          condition: context.responsiveBreakpoints.largerThan(TABLET),
          wrapper: (child) => Row(
            children: [
              NavigationRail(
                selectedIndex: index,
                onDestinationSelected: onDestinationSelected,
                labelType: NavigationRailLabelType.all,
                destinations: railFromHomeDestinations(destinations),
              ),
              Expanded(child: child)
            ],
          ),
          child: child,
        ),
        bottomNavigationBar: context.responsiveBreakpoints.largerThan(TABLET) ? null : NavigationBar(
          onDestinationSelected: onDestinationSelected,
          selectedIndex: index,
          destinations: fromHomeDestinations(destinations),
        ),
      ),
    );{{/homeWithBottomNav}}{{^homeWithBottomNav}}
    return Scaffold(body: const HomeStart());{{/homeWithBottomNav}}
  }
}
